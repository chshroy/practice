// srand(time(NULL))
//treap.init()
//treap.insert(val)
//treap.delet(val)
//treap.get_val(val) 印出val是第幾大
//treap.get_rank(val) 印出第val大的數
//treap.get_pre(val) 印出<val的max
//treap.get_next(val) 印出>val的min

const int maxn = 1e5+5;

struct node {
	int sz, val, key, l, r;
};

struct Treap {
	int tot = 1, root = 1;
	node t[maxn];

	int NEW(int val) {
		t[tot] = {1, val, rand(), 0, 0};
		return tot++;
	}

	void update(int now) {
		t[now].sz = t[t[now].l].sz + t[t[now].r].sz + 1;
	}

	void merge(int &now, int a, int b) {
		if( a == 0 || b == 0 ) {
			now = a + b;
			return;
		}
		else if( t[a].key < t[b].key) {
			now = a;
			merge(t[a].r, t[a].r, b);
		}
		else {
			now = b;
			merge(t[b].l, a, t[b].l);
		}
		update(now);
	}

	void split(int now, int &a, int &b, int val) {
		if(now == 0) {
			a = b = 0;
			return;
		}
		if(t[now].val <= val) {
			a = now; 
			split(t[a].r, t[a].r, b, val);
		}
		else {
			b = now; 
			split(t[b].l, a, t[b].l, val);
		}
		update(now);
	}

	void find(int now, int rank) {
		while(t[t[now].l].sz + 1 != rank) {
			if(t[t[now].l].sz >= rank) now = t[now].l;
			else rank -= t[t[now].l].sz + 1, now = t[now].r;
		}
		cout<<t[now].val<<endl;
	}

	void insert(int val) {
		int a = 0, b = 0, nw = NEW(val);
		split(root, a, b, val);
		merge(a, a, nw);
		merge(root, a, b);
	}

	void delet(int val) {
		int a = 0, b = 0, d = 0;
		split(root, a, b, val);
		split(a, a, d, val-1);
		merge(d, t[d].l, t[d].r);
		merge(a, a, d);
		merge(root, a, b);
	}

	void get_val(int val) {
		find(root, val);
	}

	void get_rank(int val) {
		int a = 0, b = 0;
		split(root, a, b, val-1);
		cout<<t[a].sz + 1<<endl;
		merge(root, a, b);
	}

	void get_pre(int val) {
		int a = 0,  b = 0;
		split(root, a, b, val-1);
		find(a, t[a].sz);
		merge(root, a, b);
	}

	void get_next(int val) {
		int a = 0, b = 0;
		split(root, a, b, val);
		find(b, 1);
		merge(root, a, b);
	}
	void init() {
		memset(t, 0, sizeof(t));
		NEW(2147483647);
		t[1].sz = 0;
	}
} treap;
